type Swap @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  recipient: Bytes! # address
  amount0: BigInt! # int256
  amount1: BigInt! # int256
  sqrtPriceX96: BigInt! # uint160
  liquidity: BigInt! # uint128
  tick: Int! # int24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity {
  id: ID!
  timestamp: BigInt!
  name: String!
  symbol: String!
  decimals: Int!
  price: BigDecimal!
}

type QuoteExactInputSingle @entity {
id: ID!
timestamp: BigInt!
name: String!
symbol: String!
from: Bytes!
to: Bytes!
tokenIn: Token!
tokenOut: Token!
amountIn: BigDecimal!
amountOut: BigDecimal!
blockNumber: BigInt!
blockTimestamp: BigInt!
transactionHash: Bytes!
decimals: Int!
price: BigDecimal!
}

type QuoteExactOutputSingle @entity {
id: ID!
timestamp: BigInt!
name: String!
symbol: String!
from: Bytes!
to: Bytes!
tokenIn: Token!
tokenOut: Token!
amountIn: BigDecimal!
amountOut: BigDecimal!
blockNumber: BigInt!
blockTimestamp: BigInt!
transactionHash: Bytes!
decimals: Int!
price: BigDecimal!
}

type Quoter @entity {
id: ID!
timestamp: BigInt!
name: String!
symbol: String!
tokenIn: Token!
tokenOut: Token!
amountIn: BigDecimal!
amountOut: BigDecimal!
price: BigDecimal!
}

type AnswerUpdated @entity(immutable: true) {
  id: Bytes!
  current: BigInt! # int256
  roundId: BigInt! # uint256
  updatedAt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}