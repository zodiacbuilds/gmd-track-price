// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TokenPriceFunctionSet extends ethereum.Event {
  get params(): TokenPriceFunctionSet__Params {
    return new TokenPriceFunctionSet__Params(this);
  }
}

export class TokenPriceFunctionSet__Params {
  _event: TokenPriceFunctionSet;

  constructor(event: TokenPriceFunctionSet) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fnCalldata(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }
}

export class TokenPrices extends ethereum.SmartContract {
  static bind(address: Address): TokenPrices {
    return new TokenPrices("TokenPrices", address);
  }

  aliasFor(sourceToken: Address): BigInt {
    let result = super.call("aliasFor", "aliasFor(address):(uint256)", [
      ethereum.Value.fromAddress(sourceToken)
    ]);

    return result[0].toBigInt();
  }

  try_aliasFor(sourceToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("aliasFor", "aliasFor(address):(uint256)", [
      ethereum.Value.fromAddress(sourceToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  div(numerator: Bytes, denominator: Bytes): BigInt {
    let result = super.call("div", "div(bytes,bytes):(uint256)", [
      ethereum.Value.fromBytes(numerator),
      ethereum.Value.fromBytes(denominator)
    ]);

    return result[0].toBigInt();
  }

  try_div(numerator: Bytes, denominator: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("div", "div(bytes,bytes):(uint256)", [
      ethereum.Value.fromBytes(numerator),
      ethereum.Value.fromBytes(denominator)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  glpPrice(glpManager: Address): BigInt {
    let result = super.call("glpPrice", "glpPrice(address):(uint256)", [
      ethereum.Value.fromAddress(glpManager)
    ]);

    return result[0].toBigInt();
  }

  try_glpPrice(glpManager: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("glpPrice", "glpPrice(address):(uint256)", [
      ethereum.Value.fromAddress(glpManager)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  gmxVaultPrice(vault: Address, token: Address): BigInt {
    let result = super.call(
      "gmxVaultPrice",
      "gmxVaultPrice(address,address):(uint256)",
      [ethereum.Value.fromAddress(vault), ethereum.Value.fromAddress(token)]
    );

    return result[0].toBigInt();
  }

  try_gmxVaultPrice(
    vault: Address,
    token: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "gmxVaultPrice",
      "gmxVaultPrice(address,address):(uint256)",
      [ethereum.Value.fromAddress(vault), ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mul(v1: Bytes, v2: Bytes): BigInt {
    let result = super.call("mul", "mul(bytes,bytes):(uint256)", [
      ethereum.Value.fromBytes(v1),
      ethereum.Value.fromBytes(v2)
    ]);

    return result[0].toBigInt();
  }

  try_mul(v1: Bytes, v2: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mul", "mul(bytes,bytes):(uint256)", [
      ethereum.Value.fromBytes(v1),
      ethereum.Value.fromBytes(v2)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oraclePrice(_oracle: Address, _stalenessThreshold: BigInt): BigInt {
    let result = super.call(
      "oraclePrice",
      "oraclePrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_oracle),
        ethereum.Value.fromUnsignedBigInt(_stalenessThreshold)
      ]
    );

    return result[0].toBigInt();
  }

  try_oraclePrice(
    _oracle: Address,
    _stalenessThreshold: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "oraclePrice",
      "oraclePrice(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_oracle),
        ethereum.Value.fromUnsignedBigInt(_stalenessThreshold)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  priceFnCalldata(param0: Address): Bytes {
    let result = super.call(
      "priceFnCalldata",
      "priceFnCalldata(address):(bytes)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBytes();
  }

  try_priceFnCalldata(param0: Address): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "priceFnCalldata",
      "priceFnCalldata(address):(bytes)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  repricingTokenPrice(_repricingToken: Address): BigInt {
    let result = super.call(
      "repricingTokenPrice",
      "repricingTokenPrice(address):(uint256)",
      [ethereum.Value.fromAddress(_repricingToken)]
    );

    return result[0].toBigInt();
  }

  try_repricingTokenPrice(
    _repricingToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repricingTokenPrice",
      "repricingTokenPrice(address):(uint256)",
      [ethereum.Value.fromAddress(_repricingToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  scalar(_amount: BigInt): BigInt {
    let result = super.call("scalar", "scalar(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);

    return result[0].toBigInt();
  }

  try_scalar(_amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("scalar", "scalar(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPrice(token: Address): BigInt {
    let result = super.call("tokenPrice", "tokenPrice(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBigInt();
  }

  try_tokenPrice(token: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("tokenPrice", "tokenPrice(address):(uint256)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenPrices(tokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "tokenPrices",
      "tokenPrices(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens)]
    );

    return result[0].toBigIntArray();
  }

  try_tokenPrices(tokens: Array<Address>): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "tokenPrices",
      "tokenPrices(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(tokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  traderJoeBestPrice(
    joeQuoter: Address,
    sellToken: Address,
    buyToken: Address
  ): BigInt {
    let result = super.call(
      "traderJoeBestPrice",
      "traderJoeBestPrice(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(joeQuoter),
        ethereum.Value.fromAddress(sellToken),
        ethereum.Value.fromAddress(buyToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_traderJoeBestPrice(
    joeQuoter: Address,
    sellToken: Address,
    buyToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "traderJoeBestPrice",
      "traderJoeBestPrice(address,address,address):(uint256)",
      [
        ethereum.Value.fromAddress(joeQuoter),
        ethereum.Value.fromAddress(sellToken),
        ethereum.Value.fromAddress(buyToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  univ3Price(pool: Address, inQuotedOrder: boolean): BigInt {
    let result = super.call(
      "univ3Price",
      "univ3Price(address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromBoolean(inQuotedOrder)
      ]
    );

    return result[0].toBigInt();
  }

  try_univ3Price(
    pool: Address,
    inQuotedOrder: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "univ3Price",
      "univ3Price(address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(pool),
        ethereum.Value.fromBoolean(inQuotedOrder)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _decimals(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetTokenPriceFunctionCall extends ethereum.Call {
  get inputs(): SetTokenPriceFunctionCall__Inputs {
    return new SetTokenPriceFunctionCall__Inputs(this);
  }

  get outputs(): SetTokenPriceFunctionCall__Outputs {
    return new SetTokenPriceFunctionCall__Outputs(this);
  }
}

export class SetTokenPriceFunctionCall__Inputs {
  _call: SetTokenPriceFunctionCall;

  constructor(call: SetTokenPriceFunctionCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get fnCalldata(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class SetTokenPriceFunctionCall__Outputs {
  _call: SetTokenPriceFunctionCall;

  constructor(call: SetTokenPriceFunctionCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
