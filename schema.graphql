type Burn @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  tickLower: Int! # int24
  tickUpper: Int! # int24
  amount: BigInt! # uint128
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Collect @entity(immutable: true) {
  id: Bytes!
  owner: Bytes! # address
  recipient: Bytes! # address
  tickLower: Int! # int24
  tickUpper: Int! # int24
  amount0: BigInt! # uint128
  amount1: BigInt! # uint128
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CollectProtocol @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  recipient: Bytes! # address
  amount0: BigInt! # uint128
  amount1: BigInt! # uint128
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Flash @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  recipient: Bytes! # address
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  paid0: BigInt! # uint256
  paid1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type IncreaseObservationCardinalityNext @entity(immutable: true) {
  id: Bytes!
  observationCardinalityNextOld: Int! # uint16
  observationCardinalityNextNew: Int! # uint16
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Initialize @entity(immutable: true) {
  id: Bytes!
  sqrtPriceX96: BigInt! # uint160
  tick: Int! # int24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Mint @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  owner: Bytes! # address
  tickLower: Int! # int24
  tickUpper: Int! # int24
  amount: BigInt! # uint128
  amount0: BigInt! # uint256
  amount1: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type SetFeeProtocol @entity(immutable: true) {
  id: Bytes!
  feeProtocol0Old: Int! # uint8
  feeProtocol1Old: Int! # uint8
  feeProtocol0New: Int! # uint8
  feeProtocol1New: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Swap @entity(immutable: true) {
  id: Bytes!
  sender: Bytes! # address
  recipient: Bytes! # address
  amount0: BigInt! # int256
  amount1: BigInt! # int256
  sqrtPriceX96: BigInt! # uint160
  liquidity: BigInt! # uint128
  tick: Int! # int24
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type Token @entity {
  id: ID!
  timestamp: BigInt!
  name: String!
  symbol: String!
  decimals: Int!
  price: BigDecimal!
}

type QuoteExactInputSingle @entity {
id: ID!
timestamp: BigInt!
name: String!
symbol: String!
from: Bytes!
to: Bytes!
tokenIn: Token!
tokenOut: Token!
amountIn: BigDecimal!
amountOut: BigDecimal!
blockNumber: BigInt!
blockTimestamp: BigInt!
transactionHash: Bytes!
decimals: Int!
price: BigDecimal!
}

type QuoteExactOutputSingle @entity {
id: ID!
timestamp: BigInt!
name: String!
symbol: String!
from: Bytes!
to: Bytes!
tokenIn: Token!
tokenOut: Token!
amountIn: BigDecimal!
amountOut: BigDecimal!
blockNumber: BigInt!
blockTimestamp: BigInt!
transactionHash: Bytes!
decimals: Int!
price: BigDecimal!
}

type Quoter @entity {
id: ID!
timestamp: BigInt!
name: String!
symbol: String!
tokenIn: Token!
tokenOut: Token!
amountIn: BigDecimal!
amountOut: BigDecimal!
price: BigDecimal!
}

type AddedAccess @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type AnswerUpdated @entity(immutable: true) {
  id: Bytes!
  current: BigInt! # int256
  roundId: BigInt! # uint256
  updatedAt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BillingAccessControllerSet @entity(immutable: true) {
  id: Bytes!
  old: Bytes! # address
  current: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type BillingSet @entity(immutable: true) {
  id: Bytes!
  maximumGasPrice: BigInt! # uint32
  reasonableGasPrice: BigInt! # uint32
  microLinkPerEth: BigInt! # uint32
  linkGweiPerObservation: BigInt! # uint32
  linkGweiPerTransmission: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CheckAccessDisabled @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type CheckAccessEnabled @entity(immutable: true) {
  id: Bytes!

  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ConfigSet @entity(immutable: true) {
  id: Bytes!
  previousConfigBlockNumber: BigInt! # uint32
  configCount: BigInt! # uint64
  signers: [Bytes!]! # address[]
  transmitters: [Bytes!]! # address[]
  threshold: Int! # uint8
  encodedConfigVersion: BigInt! # uint64
  encoded: Bytes! # bytes
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type LinkTokenSet @entity(immutable: true) {
  id: Bytes!
  _oldLinkToken: Bytes! # address
  _newLinkToken: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewRound @entity(immutable: true) {
  id: Bytes!
  roundId: BigInt! # uint256
  startedBy: Bytes! # address
  startedAt: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type NewTransmission @entity(immutable: true) {
  id: Bytes!
  aggregatorRoundId: BigInt! # uint32
  answer: BigInt! # int192
  transmitter: Bytes! # address
  observations: [BigInt!]! # int192[]
  observers: Bytes! # bytes
  rawReportContext: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OraclePaid @entity(immutable: true) {
  id: Bytes!
  transmitter: Bytes! # address
  payee: Bytes! # address
  amount: BigInt! # uint256
  linkToken: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferRequested @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnershipTransferred @entity(immutable: true) {
  id: Bytes!
  from: Bytes! # address
  to: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PayeeshipTransferRequested @entity(immutable: true) {
  id: Bytes!
  transmitter: Bytes! # address
  current: Bytes! # address
  proposed: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PayeeshipTransferred @entity(immutable: true) {
  id: Bytes!
  transmitter: Bytes! # address
  previous: Bytes! # address
  current: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RemovedAccess @entity(immutable: true) {
  id: Bytes!
  user: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RequesterAccessControllerSet @entity(immutable: true) {
  id: Bytes!
  old: Bytes! # address
  current: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoundRequested @entity(immutable: true) {
  id: Bytes!
  requester: Bytes! # address
  configDigest: Bytes! # bytes16
  epoch: BigInt! # uint32
  round: Int! # uint8
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type ValidatorConfigSet @entity(immutable: true) {
  id: Bytes!
  previousValidator: Bytes! # address
  previousGasLimit: BigInt! # uint32
  currentValidator: Bytes! # address
  currentGasLimit: BigInt! # uint32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
